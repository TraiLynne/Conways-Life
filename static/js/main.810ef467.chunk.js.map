{"version":3,"sources":["components/Life.js","components/LifeCanvas.js","components/Rules.js","components/About.js","App.js","serviceWorker.js","index.js"],"names":["Life","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","oneGen","board","newBoard","i","length","push","j","neighbors","getCellNeighbors","grid","count","x","y","ix","jy","Math","round","random","drawBlankGrid","Component","LifeCanvas","getPosition","e","isClickable","refs","canvas","getBoundingClientRect","clientX","left","clientY","top","toggleState","fillSquares","context","getContext","fillStyle","life","fillRect","clearRect","drawCanvas","oneStep","request","start","setState","generation","state","startAnimation","timestamp","requestAnimationFrame","stopAnimation","cancelAnimationFrame","clearCanvas","selectPreset","myreq","target","value","drawRandomizedGrid","drawGlider","drawSmallExploder","drawExploder","draw10CellRow","drawLightWeightSpaceShip","strokeStyle","moveTo","lineTo","stroke","x_index","floor","y_index","_this2","react_default","a","createElement","className","ref","width","height","onClick","onChange","defaultValue","Rules","About","href","App","LifeCanvas_LifeCanvas","Rules_Rules","About_About","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.810ef467.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n// Game Play Logic is in here\nexport default class Life extends Component {\n    constructor() {\n        super();\n\n        this.grid = [];\n    }\n\n    oneGen = (board) => {\n        let newBoard = [];\n\n        for (let i = 0; i < board.length; i++) {\n            newBoard.push([]);\n\n            for (let j = 0; j < board.length; j++) {\n                const neighbors = this.getCellNeighbors(board, i, j);\n\n                if (neighbors === 3 && !board[i][j]) {\n\n                    newBoard[i][j] = 1;\n\n                } else if ((neighbors === 2 || neighbors === 3) && board[i][j]) {\n\n                    newBoard[i][j] = 1;\n\n                } else {\n\n                    newBoard[i][j] = 0;\n\n                }\n            }\n        }\n        this.grid = newBoard;\n    };\n\n    getCellNeighbors = (board, i, j) => {\n        let count = 0;\n        for (let x = -1; x <= 1; x++) {\n            for (let y = -1; y <= 1; y++) {\n                if (!x && !y) {\n                    continue;\n                }\n\n                const ix = i + x;\n\n                const jy = j + y;\n\n                if (ix >= 0 && ix < board.length && jy >= 0 && jy < board.length) {\n                    if (board[ix][jy]) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    };\n\n    drawBlankGrid() {\n        this.grid = [];\n\n        for (let i = 0; i < 25; i++) {\n            this.grid[i] = [];\n\n            for (let j = 0; j < 25; j++) {\n                this.grid[i].push(0);\n            }\n        }\n    };\n    \n    drawRandomizedGrid() {\n        this.grid = [];\n\n        for (let i = 0; i < 25; i++) {\n            this.grid[i] = [];\n\n            for (let j = 0; j < 25; j++) {\n                this.grid[i].push(Math.round(Math.random()));\n            }\n        }\n    };\n\n    drawGlider() {\n        // Clear Grid\n        this.drawBlankGrid();\n\n        // Draw Shape\n        this.grid[1][0] = 1;\n        this.grid[2][1] = 1;\n        this.grid[2][2] = 1;\n        this.grid[1][2] = 1;\n        this.grid[0][2] = 1;\n    };\n\n    drawSmallExploder() {\n        // Clear Grid\n        this.drawBlankGrid();\n\n        // Draw Shape\n        this.grid[11][10] = 1;\n        this.grid[11][11] = 1;\n        this.grid[10][11] = 1;\n        this.grid[12][11] = 1;\n        this.grid[10][12] = 1;\n        this.grid[12][12] = 1;\n        this.grid[11][13] = 1;\n    };\n\n    drawExploder() {\n        // Clear Grid\n        this.drawBlankGrid();\n\n        // Draw Shape\n        this.grid[10][9] = 1;\n        this.grid[10][10] = 1;\n        this.grid[10][11] = 1;\n        this.grid[10][12] = 1;\n        this.grid[10][13] = 1;\n        this.grid[12][9] = 1;\n        this.grid[12][13] = 1;\n        this.grid[14][9] = 1;\n        this.grid[14][10] = 1;\n        this.grid[14][11] = 1;\n        this.grid[14][12] = 1;\n        this.grid[14][13] = 1;\n    };\n\n    draw10CellRow() {\n        // Clear Grid\n        this.drawBlankGrid();\n\n        // Draw Shape\n        for (let i = 8; i < 18; i++) {\n            this.grid[i][12] = 1;\n        }\n    };\n\n    drawLightWeightSpaceShip() {\n        // Clear Grid\n        this.drawBlankGrid();\n\n        // Draw Shape\n        this.grid[1][15] = 1;\n        for (let i = 2; i < 6; i++) {\n            this.grid[i][14] = 1;\n        }\n        this.grid[5][15] = 1;\n        this.grid[5][16] = 1;\n        this.grid[4][17] = 1;\n        this.grid[1][17] = 1;\n    };\n}","import React, { Component } from 'react';\nimport Life from './Life.js';\n\nexport default class LifeCanvas extends Component {\n    constructor() {\n        super();\n        this.state = {\n            generation: 0,\n        };\n    }\n\n    // cDM\n    componentDidMount() {\n        this.drawCanvas();\n        this.life = new Life();\n        this.life.drawBlankGrid();\n        this.start = null;\n        this.request = null;\n        this.isClickable = true;\n    }\n    \n    drawCanvas() {\n        const context = this.refs.canvas.getContext('2d');\n\n        context.strokeStyle = 'black';\n\n        for (let i = 0; i <= 375; i += 15) {\n            for (let j = 0; j <= 375; j += 15) {\n                context.moveTo(i, 0);\n                context.lineTo(i, j);\n                context.moveTo(0, j);\n                context.lineTo(i, j);\n            }\n        }\n\n        context.stroke();\n    };\n\n    getPosition = e => {\n        if (this.isClickable) {\n            const canvas = this.refs.canvas;\n            const grid = canvas.getBoundingClientRect();\n            const x = e.clientX - grid.left;\n            const y = e.clientY - grid.top;\n            this.toggleState(x, y);\n        }\n    };\n\n    toggleState(x, y) {\n        const x_index = Math.floor(x / 15);\n        const y_index = Math.floor(y / 15);\n        this.life.grid[x_index][y_index] === 0\n            ? (this.life.grid[x_index][y_index] = 1)\n            : (this.life.grid[x_index][y_index] = 0);\n        this.fillSquares();\n    };\n\n    fillSquares = () => {\n        const context = this.refs.canvas.getContext('2d');\n\n        context.fillStyle = 'red';\n\n        for (let i = 0; i < this.life.grid.length; i++) {\n            for (let j = 0; j < this.life.grid.length; j++) {\n                if (this.life.grid[i][j]) {\n                    context.fillRect(i * 15, j * 15, 15, 15);\n                } else {\n                    context.clearRect(i * 15, j * 15, 15, 15);\n                }\n            }\n        }\n        this.drawCanvas();\n    };\n\n    oneStep = () => {\n        if (!this.request && !this.start) {\n            this.life.oneGen(this.life.grid);\n            this.setState({ generation: this.state.generation + 1 }, () => {\n                this.isClickable = false;\n                this.fillSquares();\n            });\n        }\n    };\n\n    startAnimation = timestamp => {\n        this.request = requestAnimationFrame(this.startAnimation);\n        if (!this.start) {\n            this.start = timestamp;\n        }\n        const elapsed = timestamp - this.start;\n        if (elapsed > 100) {\n            this.life.oneGen(this.life.grid);\n            this.setState({ generation: this.state.generation + 1 }, () => {\n                this.start = timestamp;\n                this.isClickable = false;\n                this.fillSquares();\n            });\n        }\n    };\n\n    stopAnimation = () => {\n        cancelAnimationFrame(this.request);\n        this.request = null;\n        this.start = null;\n    };\n\n    clearCanvas = () => {\n        this.stopAnimation();\n        this.setState({ generation: 0 }, () => {\n            this.isClickable = true;\n            this.life.drawBlankGrid();\n            this.fillSquares();\n        });\n    };\n\n    selectPreset = e => {\n        if (!this.start && !this.myreq) {\n            switch (e.target.value) {\n                case 'random':\n                    this.life.drawRandomizedGrid();\n                    break;\n                case 'glider':\n                    this.life.drawGlider();\n                    break;\n                case 'smallExploder':\n                    this.life.drawSmallExploder();\n                    break;\n                case 'exploder':\n                    this.life.drawExploder();\n                    break;\n                case '10CellRow':\n                    this.life.draw10CellRow();\n                    break;\n                case 'lightWeightSpaceShip':\n                    this.life.drawLightWeightSpaceShip();\n                    break;\n                default:\n                    this.life.drawBlankGrid();\n            }\n            this.setState({ generation: 0 }, () => this.fillSquares());\n        }\n    };\n\n    render() {\n        return (\n            <div className='game-container'>\n                <p className='gen-info'>Generation #: {this.state.generation}</p>\n\n                <canvas\n                    ref=\"canvas\"\n                    width={375}\n                    height={375}\n                    onClick={e => this.getPosition(e)}\n                />\n\n                <div className=\"button-container\">\n                    <select onChange={this.selectPreset} defaultValue=\"none\">\n                        <option value=\"none\">None</option>\n                        <option value=\"random\">Random</option>\n                        <option value=\"glider\">Glider</option>\n                        <option value=\"smallExploder\">Small Exploder</option>\n                        <option value=\"exploder\">Exploder</option>\n                        <option value=\"10CellRow\">10 Cell Row</option>\n                        <option value=\"lightWeightSpaceShip\">Lightweight Spaceship</option>\n                    </select>\n                    \n                    <button onClick={() => this.oneStep()}>\n                        Step\n                    </button>\n\n                    <button\n                        onClick={() => {\n                            if (!this.request && !this.start) {\n                                this.request = requestAnimationFrame(this.startAnimation);\n                            }\n                        }}\n                    >\n                        Start\n                    </button>\n\n                    <button onClick={() => this.stopAnimation()}>\n                        Stop\n                    </button>\n\n                    <button onClick={() => this.clearCanvas()}>\n                        Clear Board\n                    </button>\n                </div>\n\n            </div>\n        );\n    }\n}","import React, { Component, Fragment } from 'react';\n\nimport '../App.css'\n\nexport default class Rules extends Component {\n    render(){\n        return (\n            <div className='rules-container'>\n                <h2>Rules</h2>\n                <ol>\n                    <li>A live cell will die if less than 2 neighbors are alive</li>\n\n                    <li>A live cell will move on to the next generation if it has 2 or 3 live neighbors</li>\n\n                    <li>A live cell will die if more than 3 of its neighbors are alive</li>\n\n                    <li>A dead cell will be revived if 3 of it's neighbors are alive</li>\n                </ol>\n            </div>\n        )\n    }\n}","import React, { Component, Fragment } from 'react';\n\nexport default class About extends Component {\n    render() {\n        return (\n            <div className='about'>\n                <h2>What's Going on Here?</h2>\n\n                <p><strong>Thee Who: </strong></p><p>Invented by British Mathematician <a href='https://en.wikipedia.org/wiki/John_Horton_Conway' target='_blank'>John Horton Conway</a></p>\n\n                <p><strong>Thee When: </strong></p>\n                \n                <p>1970</p>\n\n                <p><strong>Thee What:</strong></p>\n\n                <p><strong>Zero-Player Game:</strong> It may not feel like much of a game, given the limited amount of moves you make. But this is what we call a zero-player game where the game will progress on its own after the initial input is given. That just means you can be even lazier than those infamous idle games.</p>\n                <p><strong>Cell Automaton: </strong>Basically what you see here. A grid of cells that evolves through generations based on the given set of rules. Typically the cells have a determined number of states such as off & on or alive & dead. Each cells state in the next generation is determined by its current neighboring states (the 8 cells surrounding it in this case). </p>\n                <p></p>\n\n                <p><strong>Thee Why: </strong></p>\n                \n                <p>Back in the 1940s, there was this guy name Jon von Neuman that defined life as a creation that can reproduce itself and simulate a Turing Machine, the definition of turing completeness. Back in these days, technology had not progressed as far as it needed to for Mr. von Neuman to engineer his solution. From the information given by von Neuman, a man named Stainislaw Ulam invented cellular automata. He wanted so much to use computers to demonstrate his findings but he was a busy man. Enter Conway !! For 2 years, Conway experimented with the information provided by von Neuman, Ulam, and others who had been investigating this theory further. In 1970, his Game of Life was born.</p>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport LifeCanvas from './components/LifeCanvas';\nimport Rules from './components/Rules';\nimport './App.css';\nimport About from './components/About';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Conway's Game of Life</h1> \n      <LifeCanvas/>\n      <Rules/>\n      <About/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}